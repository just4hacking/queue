version: '3'
services:
  client:
    build:
      context: ../client
      dockerfile: Dockerfile.dev
    networks: 
      - nginx_network
    volumes: 
      - ../client:/app

  nginx:
    image: nginx:1.19-alpine
    ports:
      - 80:80
    volumes: 
      - ./nginx/templates:/etc/nginx/templates
    restart: always
    environment:
      NGINX_HOST: _
    restart: always
    networks:
      - nginx_network
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    depends_on: 
      - api
      - client

  worker:
    build:
      context: ../worker
      dockerfile: Dockerfile.dev
    networks:
      - queue_network
    environment: 
      - NODE_ENV=production
      - NATS_URI=http://broker:4222
      - NATS_CLUSTER_ID=queue
      - NATS_CLIENT_ID=worker

      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=db_1
    depends_on: 
      - broker
      - postgres
    volumes: 
      - ../worker:/app
    #restart: always

  api:
    build:
      context: ../api
      dockerfile: Dockerfile.dev
    networks:
      - queue_network
      - nginx_network
    ports: 
      - 3000:3000
    environment: 
      - NODE_ENV=production
      - NATS_URI=http://broker:4222
      - NATS_CLUSTER_ID=queue
      - NATS_CLIENT_ID=api

      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=db_1
    volumes: 
      - ../api:/app
    depends_on: 
      - broker
      - postgres

  broker:
    image: nats-streaming:0.17.0
    ports:
      - 4222:4222
      - 8222:8222
    command: [
      '-p',
      '4222',
      '-m', 
      '8222',
      '-hbi',
      '5s',
      '-hbt',
      '5s',
      '-hbf',
      '2',
      '-SD',
      '-cid',
      'queue'
    ]
    networks:
      - queue_network

  postgres:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    networks: 
      - queue_network
    environment: 
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=user
      - POSTGRES_DB=db_1
    volumes:
      - ./postgres/init.dev.sql:/docker-entrypoint-initdb.d/init.sql

networks:
  queue_network:
  nginx_network: